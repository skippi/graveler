buildscript {
  repositories {
    maven { url = 'https://files.minecraftforge.net/maven' }
    jcenter()
    mavenCentral()
  }
  dependencies {
    classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
  }
}

plugins {
  id "org.jetbrains.kotlin.jvm" version "1.3.71"
  id "com.github.johnrengelman.shadow" version "4.0.4"
  id "com.diffplug.gradle.spotless" version "3.27.2"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

version = '0.1'
group = 'graveler' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'graveler'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
  mappings channel: 'snapshot', version: '20200225-1.15.1'
  // makeObfSourceJar = false
  
  // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

  runs {
    client {
      args = ['--username', 'Foo']

      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

      // Recommended logging level for the console
      property 'forge.logging.console.level', 'info'

      mods {
        examplemod {
          source sourceSets.main
        }
      }
    }

    server {
      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

      // Recommended logging level for the console
      property 'forge.logging.console.level', 'debug'

      mods {
        examplemod {
          source sourceSets.main
        }
      }
    }

    data {
      workingDirectory project.file('run')

      // Recommended logging data for a userdev environment
      property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

      // Recommended logging level for the console
      property 'forge.logging.console.level', 'debug'

      args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

      mods {
        examplemod {
          source sourceSets.main
        }
      }
    }
  }
}

dependencies {
  minecraft 'net.minecraftforge:forge:1.15.2-31.1.30'

  compile 'org.jetbrains.kotlin:kotlin-stdlib'

  // You may put jars on which you depend on in ./libs or you may define them like so..
  // compile "some.group:artifact:version:classifier"
  // compile "some.group:artifact:version"

  // Real examples
  // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
  // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

  // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
  // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

  // These dependencies get remapped to your current MCP mappings
  // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

  // For more info...
  // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
  // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

shadowJar {
  classifier ''

  dependencies {
    include(dependency('org.jetbrains.kotlin:kotlin-stdlib:.*'))
  }

  relocate 'kotlin', 'graveler.shadow.kotlin'

  minimize()
}

reobf {
  shadowJar {}
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
  manifest {
    attributes([
      "Specification-Title": "graveler",
      "Specification-Vendor": "skippi",
      "Specification-Version": "1", // We are version 1 of ourselves
      "Implementation-Title": project.name,
      "Implementation-Version": "${version}",
      "Implementation-Vendor" :"skippi",
      "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact jar
    }
  }
  repositories {
    maven {
      url "file:///${project.projectDir}/mcmodsrepo"
    }
  }
}

spotless {
  java {
    googleJavaFormat()
    removeUnusedImports()
    trimTrailingWhitespace()
    endWithNewline()
  }
  kotlin {
    ktlint().userData([
      'indent_size': '2',
      'continuation_indent_size' : '2',
      'disabled_rules': 'no-wildcard-imports'
    ])
  }
  kotlinGradle {
    target '*.gradle.kts', 'additionalScripts/*.gradle.kts'

    ktlint().userData([
      'indent_size': '2',
      'continuation_indent_size' : '2'
    ])
  }
}
