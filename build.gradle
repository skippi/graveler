buildscript {
	repositories {
		maven { url = 'https://files.minecraftforge.net/maven' }
		jcenter()
		mavenCentral()
	}
	dependencies {
		classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
	}
}

plugins {
	id "org.jetbrains.kotlin.jvm" version "1.3.71"
	id "com.github.johnrengelman.shadow" version "4.0.4"
	id "com.diffplug.gradle.spotless" version "3.27.2"
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '0.1'
group = 'graveler' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'graveler'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

dependencies {
	compile 'org.jetbrains.kotlin:kotlin-stdlib'
}

minecraft {
	version = "1.12.2-14.23.5.2847"
	mappings = "snapshot_20171003"

	runDir = "run"
	makeObfSourceJar = true

	// accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
}

shadowJar {
	classifier ''

	dependencies {
		include(dependency('org.jetbrains.kotlin:kotlin-stdlib:.*'))
	}

	relocate 'kotlin', 'graveler.shadow.kotlin'

	minimize()
}

reobf {
	shadowJar {}
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}

	// copy everything else except the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
	manifest {
		attributes([
			"Specification-Title": "graveler",
			"Specification-Vendor": "skippi",
			"Specification-Version": "1", // We are version 1 of ourselves
			"Implementation-Title": project.name,
			"Implementation-Version": "${version}",
			"Implementation-Vendor" :"skippi",
			"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}

runClient {
	args =  ["--username", "Foo"]
}


// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
	publications {
		mavenJava(MavenPublication) {
			artifact jar
		}
	}
	repositories {
		maven {
			url "file:///${project.projectDir}/mcmodsrepo"
		}
	}
}

spotless {
	java {
		googleJavaFormat()
		removeUnusedImports()
		trimTrailingWhitespace()
		endWithNewline()
	}
	kotlin {
		ktlint("0.36.0").userData([
			'indent_size': '2',
			'continuation_indent_size' : '2',
			'disabled_rules': 'no-wildcard-imports'
		])
	}
	groovyGradle {
		greclipse()
	}
}
